// Generated by CoffeeScript 1.6.3
var Block,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Block = (function(_super) {
  __extends(Block, _super);

  Block.prototype.image_key = 'block';

  Block.prototype.init_frame = null;

  Block.block_height = 64;

  Block.block_width = 128;

  Block.prototype.right_side = null;

  function Block(group, x, y, is_left) {
    if (is_left == null) {
      is_left = true;
    }
    this.onOut = __bind(this.onOut, this);
    Block.__super__.constructor.call(this, group.game, x, y, this.image_key, this.init_frame);
    group.add(this);
    this.is_left = is_left;
    this.init();
    if (this.is_left) {
      this.addRight();
    }
    return this;
  }

  Block.prototype.addRight = function() {
    var blk;
    blk = new Block(this.group, this.game.width, this.y, false);
    blk.scale.setTo(-1, 1);
    return this.right_side = blk;
  };

  Block.prototype.init = function() {
    this.body.immovable = true;
    if (this.is_left) {
      return this.events.onOutOfBounds.add(this.onOut);
    }
  };

  Block.prototype.update = function() {
    return this.body.velocity.y = this.game.speed;
  };

  Block.prototype.onOut = function() {
    blk;
    var blk, ct, lst,
      _this = this;
    if (this.y < 0 && this.game.speed < 0) {
      ct = this.group.countLiving() - 1;
      lst = this.group.getAt(ct);
      blk = new Block(this.group, this.x, Math.floor(lst.y) + Block.block_height);
    } else if (this.y > 0 && this.game.speed > 0) {
      blk = new Block(this.group, this.x, Math.floor(this.group.getFirstAlive().y) - Block.block_height);
    }
    if (blk != null) {
      blk.preUpdate();
      blk.postUpdate();
      blk.right_side.preUpdate();
      blk.right_side.postUpdate();
      this.events.onOutOfBounds.removeAll();
      return setTimeout(function() {
        _this.right_side.destroy();
        return _this.destroy();
      }, 250);
    }
  };

  return Block;

})(Phaser.Sprite);
