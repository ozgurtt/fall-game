// Generated by CoffeeScript 1.6.3
var Main,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Main = (function(_super) {
  __extends(Main, _super);

  function Main() {
    this.die = __bind(this.die, this);
    Main.__super__.constructor.apply(this, arguments);
  }

  Main.prototype.preload = function() {
    this.game.load.image('player', 'assets/Player.png');
    this.game.load.image('block', 'assets/Block.png');
    return this.game.load.atlas('obstacles', 'assets/obstacles/obstacles.png', 'assets/obstacles/obstacles.json');
  };

  Main.prototype.create = function() {
    var block_placement_y, i, init_blocks, _i, _ref, _results;
    this.game.stage.backgroundColor = '#787878';
    this.player = new Player(this.game);
    this.game.add.existing(this.player);
    this.game.player = this.player;
    this.obstacles = new ObstacleManager(this.game);
    this.sides = this.game.add.group();
    this.game.speed = -400;
    init_blocks = this.game.world.height / Block.block_height;
    block_placement_y = 0;
    _results = [];
    for (i = _i = 0, _ref = Math.ceil(init_blocks); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      new Block(this.sides, 0, block_placement_y);
      _results.push(block_placement_y += Block.block_height);
    }
    return _results;
  };

  Main.prototype.update = function() {
    return this.game.physics.collide(this.player, this.obstacles, this.die);
  };

  Main.prototype.render = function() {
    var _this = this;
    return this.obstacles.forEachAlive(function(elem) {
      return _this.game.debug.renderPhysicsBody(elem.body);
    });
  };

  Main.prototype.die = function() {
    this.player.destroy();
    return this.game.pause();
  };

  return Main;

})(Phaser.State);
