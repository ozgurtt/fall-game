// Generated by CoffeeScript 1.6.3
var Main,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Main = (function(_super) {
  __extends(Main, _super);

  function Main() {
    this.die = __bind(this.die, this);
    this.increaseSpeed = __bind(this.increaseSpeed, this);
    Main.__super__.constructor.apply(this, arguments);
  }

  Main.prototype.preload = function() {
    this.game.load.image('scoreframe', 'assets/ScoreFrame.png');
    this.game.load.image('backdrop', 'assets/Backdrop.png');
    this.game.load.spritesheet('block', 'assets/Block.png', 128, 80);
    this.game.load.spritesheet('player', 'assets/Player.png', 32, 48);
    this.game.load.image('logo2', 'assets/Logo.png');
    this.game.load.atlas('obstacles', 'assets/obstacles/obstacles.png', 'assets/obstacles/obstacles.json');
    return this.game.load.spritesheet('glow-arrow', 'assets/obstacles/GlowArrow.png', 112, 201);
  };

  Main.prototype.create = function() {
    var backdrop, style;
    backdrop = this.game.add.sprite(0, 0, 'backdrop');
    this.game.blocks_passed = 0;
    this.started = false;
    style = {
      font: "20px Arial",
      fill: "#65dfff",
      align: "left"
    };
    this.player = new Player(this.game);
    this.player.visible = false;
    this.game.add.existing(this.player);
    this.game.player = this.player;
    return this.startText = this.game.add.text(5, 10, "In the year 20XX, corporations control the world's government.\n" + "You are a member of a covert resistance who aims to topple\n" + "the corrupt corporate government.\n" + "\n" + "You broke into a corporate headquarter at the top of a super\n" + "skyscraper and planted a virus that would destroy Civil Surveillance.\n\n\n\n" + "Unfortunately, you were spotted by security and had to improvise \n" + "an escape plan.\n" + "\n" + "Unfortunately, you aren't good at improvising.\n\n\n\n\n" + "Press ENTER to begin", style);
  };

  Main.prototype.startGame = function() {
    var block_placement_y, i, init_blocks, logo, style, _i, _ref,
      _this = this;
    this.player.visible = true;
    this.sides = this.game.add.group();
    this.obstacles = new ObstacleManager(this.game);
    this.game.speed = -550;
    logo = this.game.add.sprite(40, this.game.world.height + 800, 'logo2');
    logo.body.velocity.y = this.game.speed;
    logo.events.onOutOfBounds.add(function() {
      if (logo.y < 0) {
        logo.events.onOutOfBounds.removeAll();
        setTimeout(function() {
          return logo.destroy();
        }, 50);
        return _this.obstacles.initializeTimers();
      }
    });
    init_blocks = this.game.world.height / Block.block_height;
    block_placement_y = 0;
    for (i = _i = 0, _ref = Math.ceil(init_blocks); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      new Block(this.sides, 0, block_placement_y);
      block_placement_y += Block.block_height;
    }
    this.speedTimer = this.game.time.events.loop(2000, this.increaseSpeed);
    this.game.add.sprite(0, 0, 'scoreframe');
    style = {
      font: "19px Arial",
      fill: "#65dfff",
      align: "left"
    };
    this.score_text = this.game.add.text(25, 17, "0", style);
    return this.started = true;
  };

  Main.prototype.update = function() {
    var speed;
    if (!this.started) {
      if (this.input.keyboard.justPressed(Phaser.Keyboard.ENTER)) {
        console.log("BLAREUH");
        this.startText.destroy();
        this.startGame();
        return console.log(this.player.y);
      }
    } else {
      this.game.physics.collide(this.player, this.obstacles, this.die);
      speed = (this.game.blocks_passed * 12) / (this.game.time.time / 1000);
      return this.score_text.content = this.game.blocks_passed + " stories\n" + speed.toFixed(1) + " ft/s";
    }
  };

  Main.prototype.increaseSpeed = function() {
    this.game.speed -= 25;
    if (Math.abs(this.game.speed) > 1000) {
      return this.game.time.events.remove(this.speedTimer);
    }
  };

  Main.prototype.die = function() {
    return this.player.killed = true;
  };

  return Main;

})(Phaser.State);
